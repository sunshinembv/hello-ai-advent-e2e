name: Release (manual)

on:
  workflow_dispatch:
    inputs:
      versionName: { description: "e.g. 1.0.1", required: true }
      tag:         { description: "e.g. v1.0.1", required: true }
      notes:
        description: "Release notes (optional). Leave empty to let the CI agent generate."
        required: false
        default: ""
      generateReleaseNotes:
        description: "Use GitHub auto-generated notes? true/false"
        required: false
        default: "false"

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with: { distribution: temurin, java-version: "21" }
      - uses: gradle/actions/setup-gradle@v3

      - name: Collect context for AI notes
        run: |
          set -euo pipefail
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then RANGE="$LAST_TAG..HEAD"; else RANGE=""; fi
          echo "## Commit log" > CONTEXT.md
          if [ -n "$RANGE" ]; then
            git --no-pager log $RANGE --pretty=format:'- %s (%h) | %an' >> CONTEXT.md
          else
            git --no-pager log --pretty=format:'- %s (%h) | %an' -n 200 >> CONTEXT.md
          fi
          echo -e "\n\n## Diffstat" >> CONTEXT.md
          if [ -n "$RANGE" ]; then git diff --shortstat $RANGE >> CONTEXT.md || true
          else git diff --shortstat $(git hash-object -t tree /dev/null) HEAD >> CONTEXT.md || true; fi
          head -n 400 CONTEXT.md > CONTEXT_TRIMMED.md

      - name: Generate release notes with LLM (if empty)
        if: ${{ github.event.inputs.notes == '' }}
        env:
          OPEN_ROUTER_API_KEY: ${{ secrets.OPEN_ROUTER_API_KEY }}
          LLM_MODEL: ${{ vars.LLM_MODEL }}
          LLM_FALLBACKS: ${{ vars.LLM_FALLBACKS }}
          VERSION_NAME: ${{ github.event.inputs.versionName }}
          TAG: ${{ github.event.inputs.tag }}
        run: |
          set -euo pipefail
          cleaned="$(printf '%s' "${OPEN_ROUTER_API_KEY-}" \
            | tr -d '\r\n' \
            | sed -E 's/^[[:space:]"]+//; s/[[:space:]"]+$//' \
            | perl -CSDA -pe 's/\x{200B}|\x{200C}|\x{200D}|\x{FEFF}//g; s/\p{Space}//g')"
          if [ -z "$cleaned" ]; then
            printf "Key Features:\n- Bug fixes and improvements.\n" > GENERATED_NOTES.md
            exit 0
          fi
          DEF_PRIMARY="deepseek/deepseek-chat-v3-0324:free"
          DEF_FALLBACKS="deepseek/deepseek-r1:free"
          PRIMARY="${LLM_MODEL:-$DEF_PRIMARY}"
          FALLBACKS="${LLM_FALLBACKS:-$DEF_FALLBACKS}"

          SYS='Ты — Release Notes Writer. Сформируй краткие заметки в Markdown с тремя разделами:
          1) Key Features — 3–6 маркеров (для пользователей).
          2) Technical — 3–6 пунктов (для разработчиков).
          3) Breaking Changes — если нет, напиши "None".
          До ~1200 символов, без преамбул.'

          USER=$(printf "ВЕРСИЯ: %s (тег %s)\n\nКОНТЕКСТ:\n%s" "$VERSION_NAME" "$TAG" "$(cat CONTEXT_TRIMMED.md)")

          call_model() {
            local M="$1"
            local JSON=$(jq -n --arg s "$SYS" --arg u "$USER" --arg m "$M" \
              '{model:$m, messages:[{"role":"system","content":$s},{"role":"user","content":$u}], temperature:0.2}')
            curl -sS https://openrouter.ai/api/v1/chat/completions \
              -H "Authorization: Bearer ${cleaned}" \
              -H "Content-Type: application/json" \
              -H "HTTP-Referer: https://github.com/${{ github.repository }}" \
              -H "X-Title: Release Notes Generator" \
              -d "$JSON"
          }

          try_models() {
            local MODELS_CSV="$1"
            IFS=',' read -r -a MODELS <<< "$MODELS_CSV"
            for M in "${MODELS[@]}"; do
              M="$(echo "$M" | xargs)"; [ -n "$M" ] || continue
              for attempt in 1 2 3; do
                RESP="$(call_model "$M")" || true
                ERR_CODE="$(echo "$RESP" | jq -r '.error.code // empty' 2>/dev/null || true)"
                if [ -n "$ERR_CODE" ]; then
                  if [ "$ERR_CODE" = "429" ]; then sleep $(( 2 ** (attempt + 1) )); continue; else break; fi
                fi
                NOTES="$(echo "$RESP" | jq -r '.choices[0].message.content // empty')"
                if [ -n "$NOTES" ]; then printf "%s" "$NOTES" > GENERATED_NOTES.md; return 0; fi
                sleep $(( 2 ** (attempt + 1) ))
              done
            done
            return 1
          }

          if try_models "$PRIMARY"; then :; elif try_models "$FALLBACKS"; then :; else
            printf "Key Features:\n- Bug fixes and improvements.\n" > GENERATED_NOTES.md
          fi

      - name: Bump versionName & versionCode
        run: bash scripts/bump_version.sh "${{ github.event.inputs.versionName }}"

      - name: Commit version bump
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "chore: bump version to ${{ github.event.inputs.versionName }}" || echo "no changes"
          git push || true

      - name: Build Debug APK (always)
        run: ./gradlew :app:assembleDebug

      - name: Build Release Bundle if signing secrets present
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          set -euo pipefail
          if [ -n "${KEYSTORE_BASE64:-}" ] && [ -n "${KEYSTORE_PASSWORD:-}" ] && \
             [ -n "${KEY_ALIAS:-}" ] && [ -n "${KEY_PASSWORD:-}" ]; then
            echo "$KEYSTORE_BASE64" | base64 -d > keystore.jks
            echo "SIGNING_STORE_FILE=$GITHUB_WORKSPACE/keystore.jks" >> $GITHUB_ENV
            echo "SIGNING_STORE_PASSWORD=$KEYSTORE_PASSWORD"         >> $GITHUB_ENV
            echo "SIGNING_KEY_ALIAS=$KEY_ALIAS"                       >> $GITHUB_ENV
            echo "SIGNING_KEY_PASSWORD=$KEY_PASSWORD"                 >> $GITHUB_ENV
            ./gradlew :app:bundleRelease
          else
            echo "Signing secrets not present — skipping :app:bundleRelease"
          fi

      - name: Prepare release body file
        run: |
          set -euo pipefail
          if [ -n "${{ github.event.inputs.notes }}" ]; then
            printf "%s" "${{ github.event.inputs.notes }}" > RELEASE_NOTES.md
          elif [ -f GENERATED_NOTES.md ]; then
            cp GENERATED_NOTES.md RELEASE_NOTES.md
          else
            printf "Bug fixes and improvements.\n" > RELEASE_NOTES.md
          fi
          wc -c RELEASE_NOTES.md || true

      - name: Create GitHub Release (+upload)
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.event.inputs.tag }}
          name: ${{ github.event.inputs.versionName }}
          bodyFile: RELEASE_NOTES.md
          allowUpdates: true
          generateReleaseNotes: ${{ github.event.inputs.generateReleaseNotes }}
          artifactErrorsFailBuild: false
          artifacts: |
            app/build/outputs/apk/debug/**/*.apk
            app/build/outputs/bundle/release/**/*.aab

      # 7) (опц.) Notion
      - name: Post to Notion (optional)
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          NOTION_DB: ${{ vars.NOTION_DB_RELEASES }}
          TAG:  ${{ github.event.inputs.tag }}
          VER:  ${{ github.event.inputs.versionName }}
          URL:  ${{ format('https://github.com/{0}/releases/tag/{1}', github.repository, github.event.inputs.tag) }}
        run: |
          set -euo pipefail
          if [ -z "${NOTION_TOKEN:-}" ] || [ -z "${NOTION_DB:-}" ]; then
            echo "Notion token or DB missing — skipping Notion step"
            exit 0
          fi
          NOTES_TEXT=$(sed -e 's/"/\\"/g' RELEASE_NOTES.md | tr -d '\r' | head -c 4000)
          NOW=$(date -u +%FT%TZ)
          DATA=$(jq -n --arg db "$NOTION_DB" --arg ver "$VER" --arg tag "$TAG" --arg url "$URL" --arg notes "$NOTES_TEXT" --arg now "$NOW" '
            { parent:{database_id:$db},
              properties:{
                "Name":{title:[{type:"text",text:{content:$ver}}]},
                "Tag":{rich_text:[{type:"text",text:{content:$tag}}]},
                "Release URL":{url:$url},
                "Released":{date:{start:$now}}
              },
              children:[
                {object:"block",type:"heading_2",heading_2:{rich_text:[{type:"text",text:{content:"Changelog"}}]}},
                {object:"block",type:"paragraph",paragraph:{rich_text:[{type:"text",text:{content:$notes}}]}}
              ] }')
          curl -sS -X POST "https://api.notion.com/v1/pages" \
            -H "Authorization: Bearer ${NOTION_TOKEN}" \
            -H "Content-Type: application/json" \
            -H "Notion-Version: 2022-06-28" \
            -d "$DATA" | jq .